{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AAEnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AAEH;;;;6CAESC,U,EAAW;AAAA;;AAIjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MACTN,WADS,CAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEiB,WAFjB,EAGTO,WAHS,CAGG,MAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMAI,oCAAQI,SAAR,GAAoB,UAACC,CAAD,EAAO;;AAEvBP;AACH,6BAHD;;AAKAE,oCAAQM,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAJD;AAQH,yBArBM,CAAP;AAsBH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACkB,WADlB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;AACxB,oCAAIU,QAAQT,EAAEI,MAAF,CAASM,MAArB,CADwB,CACK;;AAE5B,oCAAGD,KAAH,EAAS;AACL,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACAP,0CAAMQ,QAAN;AAEA,iCANJ,MAMY;AACRxB,4CAAQe,WAAR;AACH;AACL,6BAZG;;AAcJF,mCAAOL,OAAP,GAAiB,aAAK;;AAElBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAAT,CAAea,IAA3B;AACAxB,uCAAO,wCAAP;AACH,6BAJD;AAOC,yBA9BM,CAAP;AA+BH;;;iDAEW;AAAA;;AAER,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACAO,WADA,CACY,CAAC,OAAKN,MAAN,CADZ,EAC2B,WAD3B,EAEAO,WAFA,CAEY,OAAKP,MAFjB,EAGA6B,KAHA,EAAd,CAFoC,CAKb;;AAEVxB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,kCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQM,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uCAAO,uCAAP;AAEH,6BAJD;AAKhB,yBAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection){\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n\r\n    }\r\n\r\n    adiciona (negociacao){\r\n\r\n\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this\r\n                ._connection\r\n                .transaction([this._store],\"readwrite\")\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = (e) => {\r\n\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação');\r\n            };  \r\n\r\n\r\n\r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let cursor = this._connection\r\n                .transaction([this._store],'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n            let atual = e.target.result; // ponteiro para uma negociação para o banco    \r\n            \r\n             if(atual){\r\n                 let dado = atual.value;\r\n\r\n                 negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                 atual.continue();\r\n             \r\n                }   else {\r\n                 resolve(negociacoes);   \r\n             }\r\n        };\r\n\r\n        cursor.onerror = e => {\r\n\r\n            console.log(e.target.error.name);\r\n            reject('Não foi possível listar as negociações');\r\n        };\r\n\r\n\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                         .transaction([this._store], 'readwrite')\r\n                         .objectStore(this._store)\r\n                         .clear(); // apaga os dados da objectStore   \r\n\r\n                         request.onsuccess = e => resolve('Negociações apagadas com sucesso');\r\n\r\n                         request.onerror = e => {\r\n                             console.log(e.target.error);\r\n                             reject('Não foi possível apagar as negoiações');\r\n\r\n                         };\r\n        });\r\n    }\r\n\r\n\r\n}"]}
{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["ListaNegociacoes","Mensagem","NegociacoesView","MensagemView","NegociacaoService","DateHelper","Bind","Negociacao","NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","_mensagem","_ordemAtual","_service","_init","lista","then","negociacoes","forEach","adiciona","negociacao","catch","texto","erro","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","cadastra","mensagem","_limpaFormulario","coluna","inverteOrdem","ordena","a","b","importa","apaga","esvazia","textoParaData","value","parseInt","parseFloat","focus","negociacaoController","currentInstance"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["import {ListaNegociacoes} from '../models/ListaNegociacoes';\r\nimport {Mensagem} from '../models/Mensagem';\r\nimport {NegociacoesView} from '../views/NegociacoesView';\r\nimport {MensagemView} from '../views/MensagemView';\r\nimport {NegociacaoService} from '../services/NegociacaoService';\r\nimport {DateHelper} from '../helpers/DateHelper';\r\nimport {Bind} from '../helpers/Bind';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\n\r\n\r\n\r\nclass NegociacaoController {\r\n\r\n      constructor() {\r\n        \r\n            let $ = document.querySelector.bind(document); // mantem a associação ao document\r\n            this._inputData = $('#data');\r\n            this._inputQuantidade = $('#quantidade');\r\n            this._inputValor = $('#valor');\r\n            \r\n/*\r\n O target é o objeto real que é encapsulado pela proxy. É este objeto que não queremos \"sujar\" com armadilhas ou qualquer código que não diga respeito ao modelo.\r\nO prop é a propriedade em si, que está sendo lida naquele momento.\r\nO receiver é a referência ao próprio proxy. É na configuração do handler do Proxy que colocamos armadilhas.\r\n*/ \r\n\r\n           // this._negociacoesView = new NegociacoesView($('#negociacoesView'));\r\n\r\n            this._listaNegociacoes = new Bind(new ListaNegociacoes(), \r\n            new NegociacoesView($('#negociacoesView')),\r\n             `adiciona`, `esvazia`, 'ordena', 'inverteOrdem');\r\n            \r\n            /*\r\n            this._listaNegociacoes = new ListaNegociacoes(model => \r\n            this._negociacoesView.update(model));\r\n\r\n            */\r\n            /*Então, o this de uma arrow function é léxico, \r\n              enquanto o this de uma função padrão é dinâmico. Com esse ajuste,\r\n              conseguimos deixar o nosso código mais sucinto.\r\n            */ \r\n\r\n          \r\n           // this._mensagemView = new MensagemView($('#mensagemView'));\r\n           this._mensagem = new Bind(new Mensagem(), new MensagemView($('#mensagemView')), `texto`);\r\n\r\n           this._ordemAtual = ''; // quando a página for carregada, não tem critério. Só passa a ter quando ele começa a clicar nas colunas\r\n           this._service = new NegociacaoService();\r\n           \r\n           this._init();   \r\n        }\r\n\r\n\r\n        _init() {\r\n\r\n          this._service \r\n              .lista()\r\n              .then(negociacoes =>\r\n                  negociacoes.forEach(negociacao =>\r\n                      this._listaNegociacoes.adiciona(negociacao)))\r\n              .catch(erro => this._mensagem.texto = erro);\r\n      \r\n      \r\n              setInterval(() => {\r\n                  this.importaNegociacoes();\r\n              }, 3000);\r\n      }\r\n          \r\n          /* codigo a cima esta resumido \r\n          ConnectionFactory.getConnection().then(connection => {\r\n\r\n             new NegociacaoDao(connection)\r\n                 .listaTodos()\r\n                 .then(negociacoes => {\r\n\r\n                     negociacoes.forEach(negociacao => { // para cada negociação faça\r\n\r\n                         this._listaNegociacoes.adiciona(negociacao); // adiciona na lista cada negociação \r\n                     });\r\n\r\n                 }) \r\n\r\n          }); */\r\n\r\n        \r\n\r\n        adiciona(event) {\r\n\r\n          event.preventDefault();\r\n  \r\n          let negociacao = this._criaNegociacao();\r\n  \r\n          this._service \r\n              .cadastra(negociacao)\r\n              .then(mensagem => {\r\n                  this._listaNegociacoes.adiciona(negociacao);\r\n                  this._mensagem.texto = mensagem; \r\n                  this._limpaFormulario();  \r\n              }).catch(erro => this._mensagem.texto = erro);\r\n      }\r\n        \r\n/*\r\n\r\n    adiciona(event) {\r\n\r\n      event.preventDefault();\r\n\r\n      ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => {\r\n\r\n        let negociacao = this._criaNegociacao();\r\n\r\n        new NegociacaoDao(connection)\r\n        .adiciona(negociacao)\r\n        .then(() => { \r\n\r\n          this._listaNegociacoes.adiciona(negociacao);\r\n          this._mensagem.texto = 'Negociação adicionada com sucesso';\r\n          this._limpaFormulario();\r\n        \r\n        });\r\n\r\n      })\r\n      .catch(erro => this._mensagem.texto = erro);\r\n\r\n    } */\r\n\r\n         //  let helper = new DateHelper();  \r\n\r\n          // let data = helper.textoParaData(this._inputData.value);   \r\n          \r\n         // console.log(data);\r\n      \r\n      //  this._listaNegociacoes.adiciona(this._criaNegociacao()); // cria e adiciona na lista a negociacao        \r\n       // this._mensagem.texto = 'Negociação adicionada com sucesso';      \r\n       // this._limpaFormulario(); // limpa o form \r\n\r\n       // console.log(this._listaNegociacoes.negociacoes);\r\n          // console.log(negociacao);\r\n          // console.log(DateHelper.dataParaTexto(negociacao.data));\r\n  \r\n/*\r\n\r\n      importaNegociacoes(){\r\n\r\n// Usando Promise - assincrona \r\n        let service = new NegociacaoService();\r\n    \r\n        Promise.all([ // 3 arrays \r\n            service.obterNegociacoesDaSemana(), // array\r\n            service.obterNegociacoesDaSemanaAnterior(), // array\r\n            service.obterNegociacoesDaSemanaRetrasada()] // array\r\n        ).then(negociacoes => {\r\n            negociacoes // reduce cria um array q um elemento com todas as neg, concat(), que concatenará o array da primeira posição de negociacoes\r\n              .reduce((arrayAchatado, array) => arrayAchatado.concat(array), []) // junta os 3 array em um so \r\n              .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n            this._mensagem.texto = 'Negociações importadas com sucesso';\r\n        })\r\n        .catch(erro => this._mensagem.texto = erro);  \r\n\r\n\r\n        /*\r\n        service.obterNegociacoesDaSemana() // chama o método direto \r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                this._mensagem.texto = 'Negociação da semana obtida com sucesso';\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n\r\n        service.obterNegociacoesDaSemanaAnterior()\r\n            .then(negociacoes => {\r\n              negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n              this._mensagem.texto = 'Negociações da semana obtidas com sucesso';\r\n          })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n      \r\n          service.obterNegociacoesDaSemanaRetrasada()\r\n            .then(negociacoes => {\r\n              negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n              this._mensagem.texto = 'Negociações da semana obtidas com sucesso';\r\n          })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n      *\r\n\r\n\r\n      }\r\n*/\r\n\r\n        ordena(coluna) {\r\n          if(this._ordemAtual == coluna) {\r\n            this._listaNegociacoes.inverteOrdem();\r\n        } else {\r\n            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);    \r\n        }\r\n        this._ordemAtual = coluna;\r\n    }\r\n        \r\n\r\n    importaNegociacoes() {\r\n\r\n      this._service\r\n          .importa(this._listaNegociacoes.negociacoes) // lista atual\r\n          .then(negociacoes => negociacoes.forEach(negociacao => {\r\n              this._listaNegociacoes.adiciona(negociacao);\r\n              this._mensagem.texto = 'Negociações do período importadas'\r\n            }))\r\n          .catch(erro => this._mensagem.texto = erro);\r\n  }\r\n\r\n/*\r\n      importaNegociacoes(){ // antes de usar Promise\r\n\r\n        let service = new NegociacaoService();\r\n\r\n        service.obterNegociacoesDaSemana((erro, negociacoes) => { // \r\n\r\n          if(erro){ // Error-first Callback\r\n              this._mensagem.texto = err;\r\n              return; // mostra o erro \r\n            }\r\n            // cria uma array e itera adicionando na lista uma negociação  \r\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n \r\n\r\n            service.obterNegociacoesDaSemanaAnterior((erro, negociacoes) => { // \r\n\r\n          if(erro){ // Error-first Callback\r\n              this._mensagem.texto = err;\r\n              return; // mostra o erro \r\n            }\r\n            // cria uma array e itera adicionando na lista uma negociação  \r\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n\r\n            service.obterNegociacoesDaSemanaRetrasada((erro, negociacoes) => { // \r\n\r\n          if(erro){ // Error-first Callback\r\n                  this._mensagem.texto = err;\r\n                  return; // mostra o erro \r\n                }\r\n                // cria uma array e itera adicionando na lista uma negociação  \r\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n            // para cada item da lista de negociações adiciona uma negociação na lista \r\n            this._mensagem.texto = 'Negociações importadas com sucesso'; \r\n        \r\n            });\r\n    \r\n        });\r\n\r\n      });\r\n        \r\n      }\r\n\r\n      */\r\n\r\n     apaga() {\r\n\r\n      this._service\r\n          .apaga()\r\n          .then(mensagem => {\r\n            this._mensagem.texto = mensagem;\r\n            this._listaNegociacoes.esvazia();\r\n          })\r\n          .catch(erro => this._mensagem.texto = erro);\r\n\r\n      }\r\n\r\n      _criaNegociacao(){\r\n        return new Negociacao(\r\n            DateHelper.textoParaData(this._inputData.value),\r\n            parseInt(this._inputQuantidade.value),\r\n            parseFloat(this._inputValor.value ));\r\n      }\r\n\r\n      _limpaFormulario(){\r\n          this._inputData.value = '';\r\n          this._inputQuantidade.value = 1;\r\n          this._inputValor.value = 0.0;\r\n\r\n          this._inputData.focus();\r\n      }\r\n\r\n    \r\n}\r\n\r\nlet negociacaoController = new NegociacaoController();\r\n\r\nexport function currentInstance() {\r\n\r\n    return negociacaoController;\r\n\r\n}\r\n\r\n       // inputValor.value tem acesso ao valor digitado no input\r\n         /*\r\n          console.log(this._inputData.value); \r\n          console.log(this._inputQuantidade.value);\r\n          console.log(this._inputValor.value);\r\n         */\r\n\r\n         /* \r\n\r\n          // console.log(typeof(this._inputData.value));  \r\n          // 2016-11-12  \r\n          // let data1 = new Date(this._inputData.value.split('-'));  \r\n          // let dataExpressaoRegular = new Date(this._inputData.value.replace(/-/g, ','));  \r\n\r\n\r\n\r\n          let dataString = '17-05-2016';\r\n\r\n          let data = new Date(dataString.split('-').reverse().join('/'));\r\n          console.log(data);\r\n          \r\n          let dataString = '17-05-2016';\r\n\r\n          dataString = dataString.split('-').reverse().join('/');\r\n\r\n          let data = new Date(dataString);\r\n\r\n          console.log(data);\r\n\r\n\r\n          let lista1 = ['banana', 'laranja', 'mamão'];\r\nlet lista2 = ['caju', 'tangerina', 'abacaxi'];\r\n\r\nlista1.push(...lista2);\r\n\r\nconsole.log(lista1);\r\n//[\"banana\", \"laranja\", \"mamão\", \"caju\", \"tangerina\", \"abacaxi\"]\r\n          \r\n          */\r\n\r\n\r\n                          /*\r\n            this._listaNegociacoes = new ListaNegociacoes(this, function(model){ // passa a instância de lista de negociações\r\n\r\n                this._negociacoesView.update(model); // seja negociacao controller \r\n\r\n            });*/\r\n"]}
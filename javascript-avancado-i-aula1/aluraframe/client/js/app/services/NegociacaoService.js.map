{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","periodos","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","negociacoes","reduce","dados","periodo","concat","erro","Error","get","then","map","Date","objeto","data","quantidade","valor","catch","console","log","negociacao","getConnection","conexao","dao","adiciona","connection","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n\r\n    constructor(){\r\n      this._http = new HttpService();\r\n    }\r\n\r\n    async obterNegociacoes() {\r\n\r\n      try {\r\n        const periodos = await Promise.all([\r\n          this.obterNegociacoesDaSemana(),\r\n          this.obterNegociacoesDaSemanaAnterior(),\r\n          this.obterNegociacoesDaSemanaRetrasada()\r\n        ]);\r\n        let negociacoes = periodos\r\n          .reduce((dados, periodo) => dados.concat(periodo), []);\r\n        return negociacoes;\r\n      }\r\n      catch (erro) {\r\n        throw new Error(erro);\r\n      }\r\n\r\n  } \r\n\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n      return  this._http\r\n              .get('negociacoes/semana')\r\n              .then(negociacoes => {\r\n                return (negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n              })\r\n              .catch(erro => {\r\n                  console.log(erro);\r\n                  throw new Error('Não foi possível obter as negociações da semana');\r\n              });\r\n}\r\n\r\n/*\r\n    obterNegociacoesDaSemana() { \r\n\r\n        return new Promise((resolve, reject) => {\r\n          \r\n        let xhr = new XMLHttpRequest(); // cria uma instância \r\n        xhr.open('GET', 'negociacoes/semana'); // indica qual endereço e o método \r\n        configurações \r\n        xhr.onreadystatechange = () => { // arrow function \r\n\r\n\r\n          /*\r\n          0: requisição ainda não iniciada\r\n\r\n          1: conexão com o servidor estabelecida\r\n\r\n          2: requisição recebida\r\n\r\n          3: processando requisição\r\n\r\n          4: requisição está concluída e a resposta está pronta \r\n\r\n          if(xhr.readyState == 4 ){\r\n\r\n            if(xhr.status == 200){ \r\n\r\n              // passa para o then\r\n              resolve(JSON.parse(xhr.responseText) // para cada objeto do array cria uma negociação \r\n              .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n              \r\n            } else {\r\n              console.log(xhr.responseText);\r\n              reject(`Não foi possivel obter as negociações da semana`);  // error \r\n            }  \r\n        }\r\n    };\r\n\r\n    xhr.send();\r\n\r\n        });\r\n\r\n}\r\n*/\r\n\r\nobterNegociacoesDaSemanaAnterior() {\r\n\r\n  return  this._http\r\n          .get('negociacoes/anterior')\r\n          .then(negociacoes => {\r\n              console.log(negociacoes);\r\n              return (negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n          })\r\n          .catch(erro => {\r\n              console.log(erro);\r\n              throw new Error('Não foi possível obter as negociações da semana anterior');32\r\n    });\r\n \r\n}\r\n\r\n\r\nobterNegociacoesDaSemanaRetrasada() {\r\n\r\n  return this._http\r\n          .get('negociacoes/retrasada')\r\n          .then(negociacoes => {\r\n              console.log(negociacoes);\r\n              return (negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n          })\r\n          .catch(erro => {\r\n              console.log(erro);\r\n              throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n  });\r\n\r\n}\r\n\r\ncadastra(negociacao) {\r\n  return ConnectionFactory\r\n     .getConnection()\r\n     .then(conexao => new NegociacaoDao(conexao))\r\n     .then(dao => dao.adiciona(negociacao))\r\n     .then(() => 'Negociação cadastrada com sucesso')\r\n     .catch(erro => {\r\n       console.log(erro)\r\n         throw new Error(\"Não foi possível adicionar a negociação\")\r\n     });\r\n}\r\n\r\n\r\n\r\nlista() {\r\n\r\n  return ConnectionFactory\r\n          .getConnection()\r\n          .then(connection => new NegociacaoDao(connection))\r\n          .then(dao => dao.listaTodos())\r\n          .catch(erro => {\r\n              console.log(erro);\r\n              throw new Error('Não foi possível obter as negociações')\r\n            });\r\n}\r\n\r\napaga() {\r\n\r\n  return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.apagaTodos())\r\n      .then(() => 'Negociações apagadas com sucesso')\r\n      .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível apagar as negociações')\r\n      });\r\n}\r\n\r\nimporta(listaAtual) {\r\n\r\n  return this.obterNegociacoes()\r\n      .then(negociacoes => \r\n          negociacoes.filter(negociacao => \r\n              !listaAtual.some(negociacaoExistente => \r\n                  JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n      )\r\n      .catch(erro => {\r\n          console.log(erro);\r\n          throw new Error('Não foi possível buscar negociações para importar');\r\n      })\r\n  }\r\n\r\n}"]}
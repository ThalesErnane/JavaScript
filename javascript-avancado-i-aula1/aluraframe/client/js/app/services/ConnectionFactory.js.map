{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AAET,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAe;AACX;AACAA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB,CAFW,CAEmB;AAC9Bd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR,CAHW,CAGgC;AAC3CA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAIH;AACDE,wCAAQL,UAAR;AACH,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BALD;AAOH,yBA9BM,CAAP;AA+BH;;;kDAEoBtB,U,EAAW;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB;AACH,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEhD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC,EAJuB,CAIuC;AACjE,yBALE;AAOH;;;sDAEwB;;AAErB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\n// usando Module Pattern\r\n// var ConnectionFactory = (function () { // função anonima \r\n\r\nconst stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\n\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor(){\r\n\r\n        throw new Error('Não é possivel criar instâncias de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection (){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result);\r\n\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n\r\n                if(!connection){\r\n                    // Monkey Patch \r\n                    connection = e.target.result; // verifica se é nulo, se sim recebe a conexão  \r\n                    close = connection.close.bind(connection); // vai receber a função close, copia já associado com connection     \r\n                    connection.close = function(){\r\n                        throw new Error('Você não pode fechar diretamente a conexão'); \r\n                    }\r\n                \r\n                } \r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error)\r\n                \r\n                reject(e.target.error.name);\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n    static _createStores(connection){\r\n        stores.forEach(store => {\r\n            // apaga cada objectStore se ela exist  \r\n         if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n\r\n         connection.createObjectStore(store, { autoIncrement: true }); // cria a store\r\n     });\r\n\r\n    }\r\n\r\n    static closeConnection() {\r\n\r\n        if(connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n   }\r\n// })();\r\n\r\n"]}
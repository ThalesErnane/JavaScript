{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAGKC,G,EAAK;AACf,4BAAG,CAACA,IAAIC,EAAR,EAAa;AACX,kCAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACA,+BAAOH,GAAP,CAHa,CAGD;AAEjB;;;wCAEGI,G,EAAK;AAAA;;AAEL,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,CAAP;AAGH;;;yCA4BAJ,G,EAAKK,I,EAAM;AAAA;;AAAE;;AAEd,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAS,EAAE,gBAAgB,kBAAlB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf,CAHQ,CAGa;AAHb,yBAAX,EAKNH,IALM,CAKD;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBALC,CAAP;AAMH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    // ECMAScript 2015, Fetch API\r\n    _handleErrors(res) {\r\n        if(!res.ok)  // se deu um erro \r\n          throw new Error(res.statusText);\r\n          return res; // se nÃ£o \r\n        \r\n    }\r\n\r\n    get(url) {\r\n       \r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n    }\r\n\r\n\r\n    /*\r\n    get(url) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', url);\r\n            xhr.onreadystatechange = () => {\r\n                if(xhr.readyState == 4) {\r\n                    if(xhr.status == 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        console.log(xhr.responseText);\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            }\r\n\r\n            xhr.send();\r\n        });\r\n    }\r\n*/\r\n\r\n\r\n\r\npost(url, dado) { // usando fetch API\r\n\r\n    return fetch(url, {\r\n        headers: { 'Content-Type': 'application/json' },\r\n        method: 'post',\r\n        body: JSON.stringify(dado) // dado q esta enviando, converte para String \r\n    })\r\n    .then(res => this._handleErrors(res));\r\n}\r\n\r\n/*\r\n    post(url, dado) {\r\n\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n    } */\r\n\r\n}"]}
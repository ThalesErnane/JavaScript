Desde o início do treinamento solicitei que vocês usassem o Google Chrome por ele suportar vários recursos do ES6. Contudo, o Firefox não fica atrás. Então, porque eu deixei esse navegador de fora? Simplesmente por eles não suportarem o input do tipo Date. Só por isso, Flávio? Sim!

Se eu tivesse começado o treinamento sem o auxílio do input do tipo Date muitos alunos focariam na validação do campo e perderiam o foco do treinamento. Contudo, com uma pequena alteração podemos fazer com que nosso código funcione no Firefox.

ATENÇÃO: o código foi testado no Firefox 45.0.2! Quer saber se versões mais antigas suportam os recursos que utilizamos? Acesse o módulo I deste curso, e veja a dica no exercício obrigatório do capítulo. Observação: Desde do Firefox versão 57 o tipo de input Date é nativamente suportado, veja na documentação.

Alterando a interface
O primeiro passo é deixarmos de usar o input do tipo date. Vamos usar um input padrão, do tipo texto e usar um placeholder para solicitar que o usuário digite seu código no formato dd/mm/aaaa:

<!-- aluraframe/client/index.html -->
<div class="form-group">
    <label for="data">Data</label>
    <!-- alterou para input text e ainda esta com um placeholder -->
    <input type="text" placeholder="dd/mm/aaaa" id="data" class="form-control" required autofocus/>        
</div>    
Alterando nosso helper de data
Precisamos alterar a classe DateHelper. Hoje ela espera receber um string no formato aaaa-mm-dd. Esse formato só era assim porque usávamos o input date, agora, vamos fazer com que o DateHelper funcione da seguinte maneira:

1 - validar uma data no formato dd/mm/yyyy

2 - extraia do formato dd/mm/yyyy um array com o ano, mes e dia.

Alterando a classe DateHelper:

// aluraframe/client/js/app/helpers/DateHelper.js

class DateHelper {

    // código anterior omitido

    static textoParaData(texto) {

        // mudamos a validação para aceitar o novo formato!
        if(!/\d{2}\/\d{2}\/\d{4}/.test(texto)) 
            throw new Error('Deve estar no formato dd/mm/aaaa');

        // veja que usamos no split '/' no lugar de '-'. Usamos `reverse` também para ficar ano/mes/dia.      
        return new Date(...texto.split('/').reverse().map((item, indice) => item - indice % 2));
    }
}
Quando alteramos nossa expressão regular, trocamos - por /, contudo, como esse é um caractere especial, precisamos usar \/. O nosso processo de desmembrar a string continua o mesmo, mas como temos uma data no formato dd/mm/aaaa, precisamos realizar um split usando / como separador e aplicar um .reverse()! A inversão dos itens do array é importante, porque a função map espera encontrar um array com ano, mês e dia e não dia, mês e ano.

Realize um teste ainda no Chrome. Digite por enquanto apenas datas válidas. Assim que você verificar que esta funcionando, digite seu nome no campo que captura a data e clique em incluir. O que acontecerá? Nada! Abrindo o console vemos a mensagem:

DateHelper.js:16 Uncaught Error: Deve estar no formato dd/mm/aaaa
Existe try e catch em JavaScript?
O usuário nem fica sabendo que sua data é inválida! Que tal exibirmos essa mensagem para o usuário para que ele saiba o que esta acontecendo? Lembre-se que no método DateHelper.textoParaData lançamos um erro com a instrução throw. Essa instrução indica que houve um erro e que o método onde ele ocorreu não vai tratá-lo, mas sim lançá-lo para quem chamou o método. Sendo assim, quem chamou DateHelper.textoParaData? O método _criaNegociacao de NegociacaoController.

Quando temos uma área que pode resultar em um erro, envolvemos essa área com a instrução try. É como se aquela área fosse um campo minado e que em algum momento pode ocorrer um erro e precisamos estar preparados para lidar com ele. No bloco try quando ocorre um lançamento com throw, podemos capturar o erro lançado no bloco catch. Vejamos:

class NegociacaoController {

    // código anterior omitido

    adiciona(event) {

        event.preventDefault();

        try {
            this._listaNegociacoes.adiciona(this._criaNegociacao());
            this._mensagem.texto = 'Negociação adicionada com sucesso'; 
            this._limpaFormulario();   
        } catch(erro) {
            this._mensagem.texto = erro;
        }
    }
Veja que a chamada de this._criaNegociacao() está dentro do bloco try, mas não ela apenas, mas o código que exibe a mensagem de sucesso e o de limpeza do formulário. A ideia é a seguinte: quando um erro é lançado, como this_criaNegociacao() não o trata, o erro sobe na pilha. Daí, o interpretador JavaScript perguntará se quem chamou this._criaNegociacao está preparado para tratá-lo. E sim, está!

Se um erro acontecer, nosso código será direcionado para a cláusula catch, e nela temos acesso ao erro lançado pela instrução throws lá do nosso DateHelper. Resumindo: se um erro acontecer, não exibiremos a mensagem de sucesso e não limparemos o formulário e exibiremos a mensagem de erro para o usuário. Se não houver erro, as três instruções bloco try serão executadas, ou seja, a negociação será adicionada, a mensagem de sucesso exibida e o formulário limpo.

Teste mais uma vez no Chrome. Funcionando? Agora abra o Firefox e verifique que tudo funciona.


////////////////////////////// Funcionando no Safari

O Safari, até sua versão 9 suporta muito pouco o ES6 (nem com reza forte vai funcionar nosso código sem o uso de transpiler!). Contudo uma nova versão está no forno e essa promete ter o maior suporte de todos os navegadores. Eu realizei um teste com o Safari Tecnology Preview (versão teste da nova versão que sairá) e o código funcionou perfeitamente, mas há um detalhe interessante que vale a pena colocar aqui até para engrandecer a discussão.

OBS.: você precisa ter feito o fix do Firefox (ele não suporta o input date) e ainda estar usando a versão teste do próximo navegador da Apple. Tudo bem?

Durante o treinamento, aprendemos a usar let ao invés de var justamente por let criar escopo de bloco. Contudo, vejamos a tag script que inicializa nossa controller:

<!-- aluraframe/client/ndex.html -->
<!-- código anterior omitido -->
   <script>
        let negociacaoController = new NegociacaoController();
    </script>
<!-- código posterior omitido -->
No Chrome e no Firefox não há problema, mas na tecnologia Preview do Safari, apesar de suportar a sintaxe let apenas aqui o código não funciona. o Safari está errado? Vamos dizer que dependendo do ponto de vista não.

A sintaxe let criado foi para permitir um escopo de bloco de variáveis. Veja que o código anterior que declara nosso controller no escopo global não está dentro de nenhum bloco! O Safari entende que é uma declaração inválida, pois let deve ser usada apenas dentro de blocos. Para mim, faz sentido, apesar de o Chrome e o Firefox não serem tão chatos nesse ponto.

Sendo assim, para que nosso código funcione no Safari precisamos alterar simplesmente, apenas nesse ponto a declaração da variável para var:

<!-- aluraframe/client/index.html -->
<!-- código anterior omitido -->
<script>
        var negociacaoController = new NegociacaoController();
</script>
<!-- código posterior omitido -->
Então, podemos usar a seguinte regra: usamos var quando queremos que a variável tenha escopo global ou de função, e usarmos let quando queremos que a variável tenha sempre escopo de bloco. Em nosso caso, como nosso controller está no escopo global, faz todo sentido usarmos var.




/////////////////////////////////////////////////// Funcionando no Ea

Até sua versão 13, o Microsoft Edge não possui o método includes de Array. Veja que isso nos causará problemas. Vejamos o código do nosso ProxyFactory:

class ProxyFactory {

    static create(objeto, props, acao) {

        return new Proxy(objeto, {

                get(target, prop, receiver) {

                    // uso includes aqui!
                    if(props.includes(prop) && ProxyFactory._ehFuncao(target[prop])) {

                        return function() {

                            console.log(`interceptando ${prop}`);
                            let retorno = Reflect.apply(target[prop], target, arguments);
                            acao(target);
                            return retorno;
                        }
                    }

                    return Reflect.get(target, prop, receiver);
                },

                set(target, prop, value, receiver) {

                    let retorno = Reflect.set(target, prop, value, receiver);

                    // uso includes aqui!
                    if(props.includes(prop)) acao(target);
                    return retorno;
                }
        });
    }

    static _ehFuncao(func) {

        return typeof(func) == typeof(Function);
    }
E agora? Bom, para resolver o problema do includes podemos criar um polyfill extreme go horse que será suficiente para resolver o problema. Mas o que é um polyfill?

Criando um polyfill
Um polyfill é um script que emula o comportamento de um recurso quando esse não é suportado para garantir que nosso código funcione sem termos que abdicar do que é mais novo.

Crie o arquivo aluraframe/client/js/app/polyfill/es6.js. Nele, vamos adicionar no prototype de Array o método includes que usa por debaixo dos panos o já conhecido indexOf. Mas, Flávio, é assim que o includes oficial é implementado? Não faço ideia, o importante é que o resultado final seja o mesmo, e usar o indexOfpor debaixo dos panos resolve isso perfeitamente. Veja que o método só é adicionando se ele não existir:

// aluraframe/client/js/app/polyfill/es6.js

if(!Array.prototype.includes) {

    // Se não existir, adiciona

    console.log('Polyfill para Array.includes aplicado.');

    Array.prototype.includes = function(elemento) {
        return this.indexOf(elemento) != -1;
    };
}
Quando adicionamos métodos no prototype de uma classe ou função construtora, todas as instâncias dessa função construtora ou classe terão o método.

Agora vamos importar esse script no head da nossa página. Isso é necessário porque ele deve alterar Array antes que ele seja usado pela nossa aplicação. Alterando aluraframe/client/index.html:

<!-- aluraframe/client/index.html -->

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Negociações</title>
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/bootstrap-theme.css">

    <!-- carregando nosso polyfill -->
    <script src="js/app/polyfill/es6.js"></script>

</head>
Excelente, mas isso não é suficiente. Sabe por quê? Porque o Edge 13 não suporta parâmetros opcionais, apenas o Edge 14 suportará. E agora?

Edge 13 não suporta parâmetros opcionais do ES6
Aqui não há como fazer um polyfill como o que fizemos sem termos que escrever muito código hack. Aqui eu deixo ao aluno decidir ou não se abdica do parâmetro opcional usando uma estratégia antiga de JavaScript. Que tal revisitarmos esse antigo truque?

Hoje nossa classe Mensagem é assim:

class Mensagem {

    // o valor padrão quando o parâmetro não é chamado é ''
    constructor(texto='') {

        this._texto = texto;
    }

    get texto() {

        return this._texto;
    }

    set texto(texto) {

        this._texto = texto;
    }
}
Precisamos alterá-la dessa forma para funcionar no Edge:

class Mensagem {

    // DEIXOU DE RECEBER O PARÂMTRO OPCIONAL
    constructor(texto) {

        this._texto = texto || ''; // se texto for undefined, vai passar ''
    }

    get texto() {

        return this._texto;
    }

    set texto(texto) {

        this._texto = texto;
    }
}
Pronto. Com essas alterações (e mais a solução que usamos para o Firefox do campo date) nosso código funcionará no Microsot Edge.